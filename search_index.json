[["index.html", "When Can We BBQ? 1 When Can We BBQ?", " When Can We BBQ? Christian Kruse 2021-05-19 1 When Can We BBQ? This report was compiled 2021-05-19 02:46:06. env_apikey = &quot;94337b7f8e577fff69707a375f192c8d&quot; "],["forecast-by-openweather.html", "2 Forecast by OpenWeather", " 2 Forecast by OpenWeather convert_timestamp = function(timestamp) { return( as.POSIXct( timestamp ,tz = &quot;Europe/Copenhagen&quot;,origin=&quot;1970-01-01&quot;) ) } convert_dataframe_timestamps = function(df) { df$dt = convert_timestamp(df$dt) df$sunrise = convert_timestamp(df$sunrise) df$sunset = convert_timestamp(df$sunset) df$moonrise = convert_timestamp(df$moonrise) df$moonset = convert_timestamp(df$moonset) return( df ) } wind_angle_to_compass = function(angle) { val = (angle + 11.25)/22.5 arr = c(&quot;N&quot;, &quot;NNE&quot;, &quot;NE&quot;, &quot;ENE&quot;, &quot;E&quot;, &quot;ESE&quot;, &quot;SE&quot;, &quot;SSE&quot;, &quot;S&quot;, &quot;SSW&quot;, &quot;SW&quot;, &quot;WSW&quot;, &quot;W&quot;, &quot;WNW&quot;, &quot;NW&quot;, &quot;NNW&quot;) return( arr[(val %% 16)] ) } convert_kelvin= function(kelvin) { return( kelvin - 273.15 ) } lat = 56.1572 lon = 10.2107 res = GET(paste0(&quot;https://api.openweathermap.org/data/2.5/onecall?lat=&quot;,lat,&quot;&amp;lon=&quot;,lon,&quot;&amp;appid=&quot;,env_apikey)) # Yeah, should really hide that api key. res_json = jsonlite::fromJSON( rawToChar( res$content ) ) res_json_current = res_json$current res_json_daily = res_json$daily res_json_hourly = res_json$hourly res_json_minutely = res_json$minutely res_json_daily = convert_dataframe_timestamps(res_json_daily) res_json_current = convert_dataframe_timestamps(res_json_current) res_json_hourly$dt = convert_timestamp(res_json_hourly$dt) res_json_minutely$dt = convert_timestamp(res_json_minutely$dt) res_json_current$temp = convert_kelvin( res_json_current$temp ) res_json_current$feels_like = convert_kelvin( res_json_current$feels_like ) res_json_current$dew_point = convert_kelvin( res_json_current$dew_point ) res_json_hourly$temp = convert_kelvin( res_json_hourly$temp ) res_json_hourly$feels_like = convert_kelvin( res_json_hourly$feels_like ) res_json_hourly$dew_point = convert_kelvin( res_json_hourly$dew_point ) "],["current-weather.html", "3 Current Weather 3.1 Minutely Precipitation", " 3 Current Weather So you donâ€™t need to look out the window. :-) Time: 2021-05-19 04:46:07 Weather Description: scattered clouds Temperature (C): 4.99 Feels Like (C): 2.58 Pressure (hPa): 1012 Humidity: 90 Dew Point: 3.49 UVI Index: 0 Clouds: 47 Visibility: 10000 Wind Speed: 2.88 Wind Degree: 272 Wind Direction: WSW 3.1 Minutely Precipitation ggplot(res_json_minutely,aes(x=dt,y=precipitation)) + geom_line() + scale_y_continuous(expand=c(0,0),limits=c(0,NA)) + theme_bw() + labs(y=&quot;Estimated precipitation (mm)&quot;,x=&quot;Time&quot;) "],["hourly-forecast.html", "4 Hourly Forecast 4.1 Temperature 4.2 Pressure 4.3 Humidity 4.4 UVI Index 4.5 Cloud Coverage 4.6 Wind Speed (Avg) 4.7 Wind Degree 4.8 Probability of Precipitation", " 4 Hourly Forecast 4.1 Temperature ggplot(res_json_hourly,aes(x=dt,y=temp)) + geom_line() + scale_y_continuous(expand=c(0,0),limits=c(-5,30),breaks = seq(-5,30,by=2.5)) + scale_x_datetime(date_labels = &quot;%h:%m&quot;) + theme_bw() + labs(y=&quot;Estimated Temperature (C)&quot;,x=&quot;Time&quot;,title=&quot;Temperature (C)&quot;) + annotate(&quot;rect&quot;,ymin = -5,ymax = 0,fill=&quot;blue&quot;,xmin = min(res_json_hourly$dt),xmax = max(res_json_hourly$dt),alpha=0.3) + annotate(&quot;rect&quot;,ymin = 0,ymax = 5,fill=&quot;lightsteelblue&quot;,xmin = min(res_json_hourly$dt),xmax = max(res_json_hourly$dt),alpha=0.3) + annotate(&quot;rect&quot;,ymin = 5,ymax = 10,fill=&quot;green&quot;,xmin = min(res_json_hourly$dt),xmax = max(res_json_hourly$dt),alpha=0.3) + annotate(&quot;rect&quot;,ymin = 10,ymax = 15,fill=&quot;yellow&quot;,xmin = min(res_json_hourly$dt),xmax = max(res_json_hourly$dt),alpha=0.3) + annotate(&quot;rect&quot;,ymin = 15,ymax = 20,fill=&quot;orange&quot;,xmin = min(res_json_hourly$dt),xmax = max(res_json_hourly$dt),alpha=0.3) + annotate(&quot;rect&quot;,ymin = 20,ymax = 30,fill=&quot;red&quot;,xmin = min(res_json_hourly$dt),xmax = max(res_json_hourly$dt),alpha=0.3) 4.2 Pressure ggplot(res_json_hourly,aes(x=dt,y=pressure)) + geom_hline(yintercept = 1013,color=&quot;black&quot;) + geom_line() + scale_y_continuous(expand=c(0,0),limits=c(1013-40,1013+40)) + theme_bw() + labs(y=&quot;Estimated Pressure (hPa)&quot;,x=&quot;Time&quot;,title=&quot;Pressure&quot;) 4.3 Humidity ggplot(res_json_hourly,aes(x=dt,y=humidity)) + geom_line() + scale_y_continuous(expand=c(0,0),limits=c(0,NA)) + theme_bw() + labs(y=&quot;Estimated Humidity ()&quot;,x=&quot;Time&quot;,title=&quot;Humidity ()&quot;) 4.4 UVI Index ggplot(res_json_hourly,aes(x=dt,y=uvi)) + geom_line() + scale_y_continuous(expand=c(0,0),limits=c(0,NA)) + theme_bw() + labs(y=&quot;Estimated UV Index ()&quot;,x=&quot;Time&quot;,title=&quot;UV Index&quot;) + annotate(&quot;rect&quot;,ymin = 0,ymax = 2,fill=&quot;green&quot;,xmin = min(res_json_hourly$dt),xmax = max(res_json_hourly$dt),alpha=0.3) + annotate(&quot;rect&quot;,ymin = 2,ymax = 6,fill=&quot;yellow&quot;,xmin = min(res_json_hourly$dt),xmax = max(res_json_hourly$dt),alpha=0.3) + annotate(&quot;rect&quot;,ymin = 6,ymax = 8,fill=&quot;orange&quot;,xmin = min(res_json_hourly$dt),xmax = max(res_json_hourly$dt),alpha=0.3) + annotate(&quot;rect&quot;,ymin = 8,ymax = 10,fill=&quot;red&quot;,xmin = min(res_json_hourly$dt),xmax = max(res_json_hourly$dt),alpha=0.3) + geom_vline(xintercept = Sys.time()) 4.5 Cloud Coverage ggplot(res_json_hourly,aes(x=dt,y=clouds)) + geom_line() + scale_y_continuous(expand=c(0,0),limits=c(0,NA)) + theme_bw() + labs(y=&quot;Estimated Clouds (C)&quot;,x=&quot;Time&quot;,title=&quot;Clouds (C)&quot;) + scale_x_datetime(date_labels = &quot;%A&quot;) + geom_vline(xintercept = Sys.time()) 4.6 Wind Speed (Avg) ggplot(res_json_hourly,aes(x=dt,y=wind_speed)) + geom_line() + scale_y_continuous(expand=c(0,0),limits=c(0,NA)) + scale_x_datetime(date_labels = &quot;%A&quot;) + geom_vline(xintercept = Sys.time()) + theme_bw() + labs(y=&quot;Wind Speed&quot;,x=&quot;Time&quot;,title=&quot;Wind Speed&quot;) + geom_line(data=res_json_hourly,aes(x=dt,y=wind_gust),color=&quot;red&quot;) + annotate(&quot;rect&quot;,ymin = 0,ymax = 4,fill=&quot;green&quot;,xmin = min(res_json_hourly$dt),xmax = max(res_json_hourly$dt),alpha=0.3) + annotate(&quot;rect&quot;,ymin = 4,ymax = 10,fill=&quot;yellow&quot;,xmin = min(res_json_hourly$dt),xmax = max(res_json_hourly$dt),alpha=0.3) + annotate(&quot;rect&quot;,ymin = 10,ymax = 20,fill=&quot;orange&quot;,xmin = min(res_json_hourly$dt),xmax = max(res_json_hourly$dt),alpha=0.3) 4.7 Wind Degree ggplot(res_json_hourly,aes(x=dt,y=wind_deg)) + geom_line() + scale_y_continuous(expand=c(0,0),limits=c(0,NA)) + geom_vline(xintercept = Sys.time()) + theme_bw() + labs(y=&quot;Wind Degree&quot;,x=&quot;Time&quot;,title=&quot;Wind Degree&quot;) 4.8 Probability of Precipitation ggplot(res_json_hourly,aes(x=dt,y=pop)) + geom_line() + scale_y_continuous(expand=c(0,0),limits=c(0,1),labels=scales::percent) + scale_x_datetime(date_labels = &quot;%A %H:%m&quot;,date_breaks = &quot;8 hours&quot;,date_minor_breaks = &quot;1 hour&quot;) + theme_bw() + geom_vline(xintercept = Sys.time()) + labs(y=&quot;Probability of Precipitation&quot;,x=&quot;Time&quot;,title=&quot;Probability of Precipitation&quot;) "],["daily-forecast.html", "5 Daily Forecast 5.1 UV Index 5.2 Rain 5.3 Probability of Precipitation 5.4 Clouds 5.5 Wind Gusts 5.6 Temperature", " 5 Daily Forecast 5.1 UV Index ggplot(res_json_daily,aes(x=dt,y=uvi)) + geom_line() + scale_y_continuous(expand=c(0,0),limits=c(0,10)) + annotate(&quot;rect&quot;,ymin = 0,ymax = 2,fill=&quot;green&quot;,xmin = min(res_json_daily$dt),xmax = max(res_json_daily$dt),alpha=0.3) + annotate(&quot;rect&quot;,ymin = 2,ymax = 6,fill=&quot;yellow&quot;,xmin = min(res_json_daily$dt),xmax = max(res_json_daily$dt),alpha=0.3) + annotate(&quot;rect&quot;,ymin = 6,ymax = 8,fill=&quot;orange&quot;,xmin = min(res_json_daily$dt),xmax = max(res_json_daily$dt),alpha=0.3) + annotate(&quot;rect&quot;,ymin = 8,ymax = 10,fill=&quot;red&quot;,xmin = min(res_json_daily$dt),xmax = max(res_json_daily$dt),alpha=0.3) + scale_x_datetime(date_labels = &quot;%A&quot;,date_breaks = &quot;1 day&quot;,date_minor_breaks = &quot;4 hours&quot;) + theme_bw() + geom_vline(xintercept = Sys.time()) + labs(y=&quot;UV Index&quot;,x=&quot;Time&quot;,title=&quot;UV Index&quot;) 5.2 Rain ggplot(res_json_daily,aes(x=dt,y=rain)) + geom_line() + geom_vline(xintercept = Sys.time()) + scale_y_continuous(expand=c(0,0),limits=c(0,NA)) + scale_x_datetime(date_labels = &quot;%A&quot;,date_breaks = &quot;1 day&quot;,date_minor_breaks = &quot;4 hours&quot;) + theme_bw() + labs(y=&quot;Rain (mm)&quot;,x=&quot;Time&quot;,title=&quot;Rain (mm)&quot;) 5.3 Probability of Precipitation ggplot(res_json_daily,aes(x=dt,y=pop)) + geom_line() + geom_vline(xintercept = Sys.time()) + scale_y_continuous(expand=c(0,0),limits=c(0,NA), labels = scales::percent) + scale_x_datetime(date_labels = &quot;%A&quot;,date_breaks = &quot;1 day&quot;,date_minor_breaks = &quot;4 hours&quot;) + theme_bw() + labs(y=&quot;Probability of Precipitation&quot;,x=&quot;Time&quot;,title=&quot;Probability of Precipitation&quot;) 5.4 Clouds ggplot(res_json_daily,aes(x=dt,y=clouds)) + geom_line() + geom_vline(xintercept = Sys.time()) + scale_y_continuous(expand=c(0,0),limits=c(0,NA)) + scale_x_datetime(date_labels = &quot;%A&quot;,date_breaks = &quot;1 day&quot;,date_minor_breaks = &quot;4 hours&quot;) + theme_bw() + labs(y=&quot;Cloud Coverage&quot;,x=&quot;Time&quot;,title=&quot;Cloud Coverage&quot;) 5.5 Wind Gusts ggplot() + geom_line(data = res_json_daily,aes(x=dt,y=wind_speed)) + scale_y_continuous(expand=c(0,0),limits=c(0,NA)) + scale_x_datetime(date_labels = &quot;%A&quot;,date_breaks = &quot;1 day&quot;,date_minor_breaks = &quot;4 hours&quot;) + theme_bw() + geom_vline(xintercept = Sys.time()) + geom_line(data=res_json_daily,aes(x=dt,y=wind_gust),color=&quot;red&quot;) + labs(y=&quot;Wind&quot;,x=&quot;Time&quot;,title=&quot;Wind &quot;) 5.6 Temperature res_json_daily %&gt;% dplyr::select(dt) %&gt;% bind_cols(res_json_daily$temp) %&gt;% gather(temp,value,day:morn) %&gt;% dplyr::mutate(value=convert_kelvin(value)) %&gt;% ggplot(.,aes(x=dt,y=value)) + geom_vline(xintercept = Sys.time()) + geom_line(aes(color=temp)) + scale_y_continuous(limits=c(0,25),expand=c(0,0)) + scale_x_datetime(date_breaks = &quot;1 day&quot;,date_minor_breaks = &quot;4 hours&quot;,date_labels = &quot;%A&quot;) + theme_bw() + theme(legend.position = &quot;bottom&quot;) + labs(x=&quot;Date&quot;,y=&quot;Temperature (C)&quot;) "],["daylight.html", "6 Daylight 6.1 Next 14 Days 6.2 Next 3 Months 6.3 2021", " 6 Daylight 6.1 Next 14 Days 6.2 Next 3 Months 6.3 2021 "]]
